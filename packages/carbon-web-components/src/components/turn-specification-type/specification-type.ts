/**
 * @license
 *
 * Copyright IBM Corp. 2019, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import { prefix } from '../../globals/settings';
import styles from './specification-type.scss';
import { property } from 'lit/decorators.js';
import { carbonElement as customElement } from '../../globals/decorators/carbon-element';

import WarningHex16 from '@carbon/icons/lib/warning--hex/16';
import Tools16 from '@carbon/icons/lib/tools/16';
import Partial16 from '@carbon/icons/lib/watson-health/status--partial-fail/16';

/**
 * Technical Specifiation
 *
 * @element cds-specification-type
 */

@customElement(`${prefix}-specification-type`)
class CDSSpecType extends LitElement {
  /**
   * Types: tehnical-specification, clarification, requirement
   */
  @property({ type: Number }) specificationGroup = 1;

  /**
   * Status can be "disabled" to set disabled state
   */
  @property({ type: Boolean }) isDisabled = false;
  @property({ type: String }) specificationLable = '';
  @property({ type: String }) specificationKods = '';

  render() {
    const iconClass = this.isDisabled
      ? 'specification-type__icon--disabled'
      : '';
    const typeClass = this.isDisabled
      ? 'specification-type__type--disabled'
      : '';

    return html`
      <div class="specification-type">
        <div class="specification-type__wrapper">
          <div class="specification-type__box">
            <div class="specification-type__icon ${iconClass}">
              ${this.renderIcon()}
            </div>
            <div class="specification-type__type ${typeClass}">
              ${this.specificationLable}
            </div>
          </div>
          <div class="specification-type__label">
            ID:${this.specificationKods}
          </div>
        </div>
      </div>
    `;
  }

  renderIcon() {
    switch (this.specificationGroup) {
      case 1:
        return html`${Tools16()}`;
      case 2:
        return html`${Partial16()}`;
      case 3:
        return html`${WarningHex16()}`;
      default:
        return html`${WarningHex16()}`;
    }
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default CDSSpecType;
