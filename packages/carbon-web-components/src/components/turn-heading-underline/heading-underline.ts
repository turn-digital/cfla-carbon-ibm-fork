/**
 * @license
 *
 * Copyright IBM Corp. 2019, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import { prefix } from '../../globals/settings';
import styles from './heading-underline.scss';
import { property } from 'lit/decorators.js';
import { carbonElement as customElement } from '../../globals/decorators/carbon-element';

interface NotificationItem {
  type: string;
  count: number;
}

/**
 * Related documents.
 *
 * @element cds-heading-underline
 */

@customElement(`${prefix}-heading-underline`)
class CDSLabelUnderline extends LitElement {
  @property({ type: String }) label = '';
  /**
   * Default value 0 so it will not be shown
   */
  @property({ type: Number }) counter = 0;

  /**
   * Can be green or red default green
   */
  @property({ type: String }) type = 'green';
  /**
   * Array of objects with type and count can be used if we need to show multiple counters for example green with number 3 and red with number 1
   */
  @property({ type: Array }) counterArr: NotificationItem[] = [];

  render() {
    return html`
      <div class="heading-underline">
        <div class="heading-underline__label-box">
          <div class="heading-underline__label">
            ${this.label}
          </div>
          ${
            this.counterArr.length > 0
              ? html`
                  <div class="heading-underline__notifications">
                    ${this.counterArr.map(
                      (item) => html`
                        <div
                          class="heading-underline__tag ${item.type
                            ? `heading-underline__tag--${item.type}`
                            : ''}">
                          ${item.count}
                        </div>
                      `
                    )}
                  </div>
                `
              : ''
          }
          ${
            this.counter > 0
              ? html`<div
                  class="heading-underline__tag ${this.type
                    ? `heading-underline__tag--${this.type}`
                    : ''}">
                  ${this.counter}
                </div>`
              : ''
          }
        </div>
      </div>

        <div class="heading-underline__underline"></div>
      </div>
    `;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default CDSLabelUnderline;
