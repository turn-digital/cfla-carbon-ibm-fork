tinymce.PluginManager.add('server_request', function (editor) {
  console.log('editor', editor);

  const editorId = editor.getParam('editorId');
  console.log('editorId', editorId);

  var requestObject = editor.getParam('request_obj') || null;
  var onServerLastEditor = editor.getParam('onServerLastEditor') || null;
  var onServerErrorTextNotification =
    editor.getParam('onServerErrorTextNotification') || null;
  var invalidateQueriesFunc = editor.getParam('invalidateQueriesFunc') || null;

  function insertServerInfoHtml() {
    var validationElement = editor
      .getElement()
      .parentNode.querySelector('#length-validation-warning');
    var serverInfoHtml = `
      <div>
        <p style="color: #5F6367; font-size: 12px; font-weight: 400" id="server-last-editor-${editorId}">
          <span id="last-editor-name-${editorId}">${
      onServerLastEditor?.name || ''
    }</span>
          <span id="last-editor-date-${editorId}">${
      onServerLastEditor?.date || ''
    }</span>
        </p>
      </div>
    `;

    if (validationElement) {
      validationElement.insertAdjacentHTML('afterend', serverInfoHtml);
    }

    if (onServerErrorTextNotification) {
      editor.notificationManager.open({
        text: onServerErrorTextNotification,
        type: 'error',
      });
    }
  }

  function makePostRequest(requestObject, data, propsBodyObj) {
    editor.mode.set('readonly');

    fetch(requestObject.urlToRequest, {
      method: requestObject.requestMethod,
      headers: {
        'Content-Type': `application/json`,
        __RequestVerificationToken: `${requestObject.verificationToken}`,
      },
      body: JSON.stringify({ ...data, ...(propsBodyObj || {}) }),
    })
      .then((response) => response.json())
      .then((result) => {
        editor.mode.set('design');
        editor.isNotDirty = true;

        var editorParentNode = editor.getElement().parentNode;
        editorParentNode.querySelector(
          `#last-editor-name-${editorId}`
        ).textContent = result.pedejaisLabotajs?.vardsUzvards;
        editorParentNode.querySelector(
          `#last-editor-date-${editorId}`
        ).textContent = result.pedejaisLabotajs?.pedejaisDarbibuDatums;

        // Show "Saved" after successful POST
        var savedElement = editor
          .getElement()
          .parentNode.querySelector(`#saved-${editorId}`);
        savedElement.style.display = 'block';

        if (invalidateQueriesFunc) {
          console.log(
            'result.pedejaisLabotajs.plugin',
            result.pedejaisLabotajs
          );
          invalidateQueriesFunc(result.pedejaisLabotajs); // Call the function of setState to change status
        }
      })
      .catch((error) => {
        editor.mode.set('design');
        editor.notificationManager.open({
          text: requestObject.errorAlertMessage || 'An error occurred.',
          type: 'error',
        });
      });
  }

  // Insert custom HTML on editor initialization
  editor.on('init', function () {
    insertServerInfoHtml(); // Initial placement of the server info HTML
  });

  editor.on('blur', function () {
    if (!editor.isNotDirty) {
      if (requestObject) {
        makePostRequest(
          requestObject,
          {
            [requestObject.requestValueKey]: editor.getContent({
              format: 'html',
            }),
          },
          requestObject.propsBodyObj
        );
      }
    }
  });
});
