tinymce.PluginManager.add('length_validation', function (editor) {
  var maxCharLength = window['config_' + editor.id].max_length || '';
  var editorTitle = window['config_' + editor.id].editorTitle || '';
  var fetchObject = window['config_' + editor.id].fetch_obj || {};

  console.log('editor', editor);

  // Function to insert custom HTML before the editor
  function insertCustomHtml() {
    var currentCharsLengs = editor.getContent({ format: 'text' }).length;
    var counterHtml = `<div style="display: flex; justify-content: space-between; align-items: center; font-size: 14px; font-weight: 400; padding: 0px 3px 6px 3px;"><p style="padding: 0; margin: 0;" id='editor-title-${editor.id}'>${editorTitle}</p><p style="padding: 0; margin: 0;" id='content-length-${editor.id}'>${currentCharsLengs}/${maxCharLength}</p></div>`;
    var textLengthValidationErrorMsgHtml = `<div id="length-validation-warning" style="color: red; display: none"><p>Pārsniegts maksimālais zīmju skaits, nodzēsiet pārsniegto tekstu</p></div>`;

    // Initial custom HTML
    var editorElement = editor.getElement();
    var textLengthValidationErrorMsgElement = editorElement.nextSibling;

    // Insert the custom HTML before the editor
    editorElement.insertAdjacentHTML('beforebegin', counterHtml);
    textLengthValidationErrorMsgElement.insertAdjacentHTML(
      'afterend',
      textLengthValidationErrorMsgHtml
    );
  }

  // Function to update chars length and background color based on character length
  function lengthValidation() {
    var currentCharsLengs = editor.getContent({ format: 'text' }).length;
    var customElementId = `content-length-${editor.id}`;
    var customHtmlElement = editor
      .getElement()
      .parentNode.querySelector(`#${customElementId}`);

    var errorDivElement = editor
      .getElement()
      .parentNode.querySelector(`#length-validation-warning`);

    // Update the custom HTML with the current text length
    if (customHtmlElement) {
      customHtmlElement.innerHTML = `${currentCharsLengs}/${maxCharLength}`;
    }

    // Change editor background color if more than maxCharLength
    if (maxCharLength) {
      if (currentCharsLengs > maxCharLength) {
        editor.getBody().style.backgroundColor = '#FF7F7F';
        customHtmlElement.style.color = '#DA1E28';
        errorDivElement.style.display = 'block';
      } else {
        editor.getBody().style.backgroundColor = ''; // Reset to default
        customHtmlElement.style.color = 'black';
        errorDivElement.style.display = 'none';
      }
    }
  }

  function makePostRequest(fetchObject, data) {
    editor.mode.set('readonly');
    console.log('data', data);

    console.log('fetchObject', fetchObject);
    fetch(fetchObject.urlToFetch, {
      method: fetchObject.fetchMethod,
      headers: {
        'Content-Type': `application/json`,
        // prettier-ignore
        "__RequestVerificationToken": `${fetchObject.headerValue}`,
      },
      body: JSON.stringify(data),
    })
      .then((response) => response.json())
      .then((result) => {
        console.log('POST request successful', result);
        editor.mode.set('design');
        editor.notificationManager.open({
          text: fetchObject.savedAlertMessages || 'Syccessfully saved.',
          type: 'success',
        });
      })
      .catch((error) => {
        console.error('Error making POST request', error);
        editor.mode.set('design');
        editor.notificationManager.open({
          text: fetchObject.errorAlertMessages || 'An error occurred.',
          type: 'error',
        });
      });
  }

  // Event listener for keyup to update background color and content length
  editor.on('keyup', function () {
    // var actualTextLength = editor.getContent({ format: 'text' }).length;
    lengthValidation();
  });
  // Insert custom HTML on editor initialization
  editor.on('init', function () {
    insertCustomHtml();
    lengthValidation(); // Update once on init to set the initial state
  });
  // Insert custom HTML on editor initialization
  editor.on('blur', function () {
    if (!editor.isNotDirty) {
      makePostRequest(fetchObject, {
        pamatojums: editor.getContent({ format: 'html' }),
      });
    }
  });
});
