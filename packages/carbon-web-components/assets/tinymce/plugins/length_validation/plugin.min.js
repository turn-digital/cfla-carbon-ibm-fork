tinymce.PluginManager.add('length_validation', function (editor) {
  var maxCharLength = editor.getParam('max_char_length') || '';
  var editorTitle = editor.getParam('editorTitle') || '';
  var length_validation_error_text =
    editor.getParam('length_validation_error_text') ||
    'Pārsniegts maksimālais zīmju skaits, nodzēsiet pārsniegto tekstu';

  // Function to insert custom HTML before the editor
  function insertCustomHtml() {
    var currentCharsLength = editor.getContent({ format: 'text' }).length;
    var counterHtml = maxCharLength
      ? `<div style="display: flex; justify-content: space-between; align-items: center; font-size: 14px; font-weight: 400; padding: 0px 3px 6px 3px;"><p style="padding: 0; margin: 0;" id='editor-title-${editor.id}'>${editorTitle}</p><div style="display: flex;"><p id='saved-${editor.id}' style="display: none; margin: 0 10px 0 0 ">Saglabāts</p><p style="padding: 0; margin: 0;" id='content-length-${editor.id}'>${currentCharsLength}/${maxCharLength}</p></div></div>`
      : `<div style="display: flex; justify-content: space-between; align-items: center; font-size: 14px; font-weight: 400; padding: 0px 3px 6px 3px;"><p style="padding: 0; margin: 0;" id='editor-title-${editor.id}'>${editorTitle}</p><div style="display: flex;"><p id='saved-${editor.id}' style="display: none;">Saglabāts</p></div></div>`;
    var textLengthValidationErrorMsgHtml = `<div id="length-validation-warning" style="color: red; display: none"><p>${length_validation_error_text}</p></div>`;

    // Initial custom HTML
    var editorElement = editor.getElement();
    var textLengthValidationErrorMsgElement = editorElement.nextSibling;

    // Insert the custom HTML before the editor
    editorElement.insertAdjacentHTML('beforebegin', counterHtml);
    textLengthValidationErrorMsgElement.insertAdjacentHTML(
      'afterend',
      textLengthValidationErrorMsgHtml
    );
  }

  // Function to update chars length and background color based on character length
  function lengthValidation() {
    var currentCharsLength = editor.getContent({ format: 'text' }).length;
    var customElementId = `content-length-${editor.id}`;
    var customHtmlElement = editor
      .getElement()
      .parentNode.querySelector(`#${customElementId}`);

    var errorDivElement = editor
      .getElement()
      .parentNode.querySelector(`#length-validation-warning`);

    // Update the custom HTML with the current text length
    if (customHtmlElement && maxCharLength) {
      customHtmlElement.innerHTML = `${currentCharsLength}/${maxCharLength}`;
    }

    // Change editor background color if more than maxCharLength
    if (maxCharLength) {
      if (currentCharsLength > maxCharLength) {
        editor.getBody().style.backgroundColor = '#FF7F7F';
        customHtmlElement.style.color = '#DA1E28';
        errorDivElement.style.display = 'block';
      } else {
        editor.getBody().style.backgroundColor = ''; // Reset to default
        customHtmlElement.style.color = 'black';
        errorDivElement.style.display = 'none';
      }
    }
  }

  // Event listener for keyup to update background color and content length
  editor.on('keyup', function () {
    var currentCharsLength = editor.getContent({ format: 'text' }).length;
    lengthValidation();

    // Hide "Saved" if there is content in the editor
    var savedElement = editor
      .getElement()
      .parentNode.querySelector(`#saved-${editor.id}`);
    if (currentCharsLength > 0) {
      savedElement.style.display = 'none';
    }
  });

  // Event listener for change to update dirty state
  editor.on('change', function () {
    var currentCharsLength = editor.getContent({ format: 'text' }).length;
    lengthValidation();

    // Hide "Saved" if the editor becomes dirty
    var savedElement = editor
      .getElement()
      .parentNode.querySelector(`#saved-${editor.id}`);
    if (!editor.isNotDirty || currentCharsLength > 0) {
      savedElement.style.display = 'none';
    }
    localStorage.setItem(
      `${editor.id}_content`,
      editor.getContent({ format: 'html' })
    );
  });

  // Insert custom HTML on editor initialization
  editor.on('init', function () {
    insertCustomHtml();
    lengthValidation(); // Update once on init to set the initial state
  });
});
